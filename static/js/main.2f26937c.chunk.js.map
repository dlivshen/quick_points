{"version":3,"sources":["components/Field.js","components/Fields.js","containers/Fields.js","actions/index.js","components/Result.js","containers/Result.js","components/App.js","serviceWorker.js","reducers/fields.js","reducers/index.js","index.js","logo.png"],"names":["Field","_ref","fieldText","fieldId","fieldValue","fieldOnChange","react_default","a","createElement","Col","componentClass","ControlLabel","xs","FormControl","type","name","value","placeholder","onChange","bsSize","Fields","fields","Grid","className","Row","components_Field","fat","text","id","event","target","carb","prot","fiber","connect","state","dispatch","newValue","valueChange","ResultPane","resultValue","isNaN","parseFloat","amount","bs_style","xsOffset","Label","bsStyle","calculateValue","result","Math","max","min","round","Result","App","Panel","Heading","Title","Image","src","logo","responsive","containers_Fields","containers_Result","Boolean","window","location","hostname","match","initialState","arguments","length","undefined","action","new_fields","_arr","_i","field","Object","assign","combineReducers","fieldsReducer","store","createStore","rootReducer","ReactDOM","render","es","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.2f26937c.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ControlLabel, FormControl, Col } from 'react-bootstrap';\n\nconst Field = ({fieldText, fieldId, fieldValue, fieldOnChange}) => (\n    <Col componentClass={ControlLabel} xs={6}>\n        <ControlLabel>\n            {fieldText} (gr)\n        </ControlLabel>\n        <FormControl\n            type=\"number\"\n            name={fieldId}\n            value={fieldValue}\n            placeholder={\"Enter value\"}\n            onChange={fieldOnChange}\n            bsSize=\"large\"\n        />\n    </Col>\n);\n\n\nField.propTypes = {\n    fieldText: PropTypes.string.isRequired,\n    fieldId: PropTypes.string.isRequired,\n    fieldOnChange: PropTypes.func.isRequired\n};\n\nexport default Field;","import React from 'react';\r\nimport Field  from '../components/Field';\r\nimport { Grid, Row } from 'react-bootstrap';\r\n\r\nconst Fields = ({fields, onChange}) => (\r\n    <Grid className=\"main-grid\">\r\n        <Row className=\"show-grid\">\r\n            <Field\r\n                fieldText={fields.fat.text}\r\n                fieldId={fields.fat.id}\r\n                fieldValue={fields.fat.value}\r\n                fieldOnChange={(event) => {onChange(fields.fat.id, event.target.value)}}\r\n            />\r\n            <Field\r\n                fieldText={fields.carb.text}\r\n                fieldId={fields.carb.id}\r\n                fieldValue={fields.carb.value}\r\n                fieldOnChange={(event) => {onChange(fields.carb.id, event.target.value)}}\r\n            />\r\n        </Row>\r\n        <Row className=\"show-grid\">\r\n            <Field\r\n                fieldText={fields.prot.text}\r\n                fieldId={fields.prot.id}\r\n                fieldValue={fields.prot.value}\r\n                fieldOnChange={(event) => {onChange(fields.prot.id, event.target.value)}}\r\n            />\r\n            <Field\r\n                fieldText={fields.fiber.text}\r\n                fieldId={fields.fiber.id}\r\n                fieldValue={fields.fiber.value}\r\n                fieldOnChange={(event) => {onChange(fields.fiber.id, event.target.value)}}\r\n            />\r\n        </Row>\r\n    </Grid>\r\n);\r\n\r\n// TODO add propTypes\r\n\r\nexport default Fields;","import { connect } from 'react-redux'\r\nimport { valueChange } from '../actions';\r\nimport Fields from '../components/Fields'\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    fields: state.fields\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onChange: (id, value) => dispatch(valueChange(id, value))\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Fields)","export const valueChange = (id, newValue) => ({\r\n    type: 'VALUE_CHANGE',\r\n    id: id,\r\n    value: newValue\r\n});","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Label, Col } from 'react-bootstrap';\n\n/**\n * Create a new pane that displays the result of the calculation.\n * @param props\n *          - value - The value to display\n */\nfunction ResultPane({resultValue}) {\n    if (isNaN(parseFloat(resultValue))) {\n        return null;\n    }\n\n    const value = resultValue;\n    const amount = value === 1 ? \"point\" : \"points\";\n    let bs_style = \"success\";\n    if (value > 5) {\n        bs_style = \"warning\";\n    }\n    if (value > 10) {\n        bs_style = \"danger\";\n    }\n\n    return (\n        <Col xsOffset={4}>\n            <h1>\n                <Label bsStyle={bs_style}>\n                    {value} {amount}\n                </Label>\n            </h1>\n        </Col>\n    );\n}\n\nResultPane.propTypes = {\n    resultValue: PropTypes.number\n};\n\nexport default ResultPane;","import { connect } from 'react-redux'\r\nimport Result from '../components/Result'\r\n\r\nconst calculateValue = (fields) => {\r\n    const fat = parseFloat(fields.fat.value);\r\n    const carb = parseFloat(fields.carb.value);\r\n    const prot = parseFloat(fields.prot.value);\r\n    const fiber = parseFloat(fields.fiber.value);\r\n\r\n    // Calculate the result according to the formula\r\n    let result = (fat*0.2571429) + (carb*0.1085714) + (prot*0.0914286) - (fiber*0.08);\r\n\r\n    // Make sure that the result does make logic\r\n    result = Math.max(result, 0);\r\n    result = Math.min(result, 100);\r\n\r\n    return Math.round(result);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    resultValue: calculateValue(state.fields)\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps\r\n)(Result);","import React from 'react';\nimport Fields from '../containers/Fields';\nimport Result from '../containers/Result'\nimport { Panel, Image} from 'react-bootstrap';\nimport '../App.css';\nimport logo from '../logo.png';\n\nconst App = () => (\n    <Panel bsStyle=\"info\" className=\"app-global\">\n        <Panel.Heading className=\"main-header\">\n            <Panel.Title componentClass=\"h1\">\n                <Image src={logo} responsive={true} className=\"main-logo\"/>\n            </Panel.Title>\n        </Panel.Heading>\n        <Fields />\n        <Result />\n    </Panel>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\r\n    fat: {\r\n        id: 'fat',\r\n        text: \"FAT\",\r\n        value: ''\r\n    },\r\n    carb: {\r\n        id: 'carb',\r\n        text: \"CARB\",\r\n        value: ''\r\n    },\r\n    prot: {\r\n        id: 'prot',\r\n        text: 'PROT',\r\n        value: ''\r\n    },\r\n    fiber: {\r\n        id: 'fiber',\r\n        text: 'FIBER',\r\n        value: ''\r\n    }\r\n}\r\n\r\n\r\nconst fields = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'VALUE_CHANGE':\r\n            let new_fields = {};\r\n            for (var field of ['fat', 'carb', 'prot', 'fiber']) {\r\n                new_fields[field] = Object.assign(state[field]);\r\n                if (action.id === field) {\r\n                    new_fields[field].value = action.value\r\n                }\r\n            }\r\n            return new_fields;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default fields;","import { combineReducers } from 'redux';\r\nimport fieldsReducer  from './fields';\r\n\r\nexport default combineReducers({\r\n    fields: fieldsReducer\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport rootReducer  from './reducers'\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.1962f440.png\";"],"sourceRoot":""}