{"version":3,"sources":["components/Field.js","components/Result.js","App.js","serviceWorker.js","index.js","logo.png"],"names":["Field","props","react_default","a","createElement","Col","componentClass","ControlLabel","xs","fieldText","FormControl","type","name","fieldName","value","fieldValue","placeholder","onChange","fieldOnChange","bsSize","ResultPane","isNaN","parseFloat","amount","bs_style","xsOffset","Label","bsStyle","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","fatValue","carbValue","protValue","fiberValue","handleValueChange","bind","assertThisInitialized","event","_this$setState","target","setState","defineProperty","calculateValue","result","Math","max","min","round","Panel","className","Heading","Title","Image","src","logo","responsive","Grid","Row","components_Field","Result","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.2da457b1.chunk.js","sourcesContent":["import React from 'react';\nimport { ControlLabel, FormControl, Col } from 'react-bootstrap';\n/**\n * Create a new field object with label and input.\n * @param props -\n *      - fieldText - The components's text to be displayed.\n *      - fieldName - The components name.\n *      - fieldValue - The value of the components.\n *      - fieldOnChange - The onChange callback function.\n */\nfunction Field(props) {\n    return (\n            <Col componentClass={ControlLabel} xs={6}>\n                <ControlLabel>\n                    {props.fieldText} (gr)\n                </ControlLabel>\n                <FormControl\n                       type=\"number\"\n                       name={props.fieldName}\n                       value={props.fieldValue}\n                       placeholder={\"Enter value\"}\n                       onChange={props.fieldOnChange}\n                       bsSize=\"large\"\n                />\n            </Col>\n    );\n}\n\n\nexport default Field;","import React from 'react';\nimport { Label, Col } from 'react-bootstrap';\n\n/**\n * Create a new pane that displays the result of the calculation.\n * @param props\n *          - value - The value to display\n */\nfunction ResultPane(props) {\n    if (isNaN(parseFloat(props.value))) {\n        return null;\n    }\n\n    const value = props.value;\n    const amount = value === 1 ? \"point\" : \"points\";\n    let bs_style = \"success\";\n    if (value > 5) {\n        bs_style = \"warning\";\n    }\n    if (value > 10) {\n        bs_style = \"danger\";\n    }\n\n    return (\n        <Col xsOffset={4}>\n            <h1>\n                <Label bsStyle={bs_style}>\n                    {value} {amount}\n                </Label>\n            </h1>\n        </Col>\n    );\n}\n\nexport default ResultPane;","import React, {Component} from 'react';\nimport Field from './components/Field';\nimport { Grid, Row, Panel, Image} from 'react-bootstrap';\nimport ResultPane from './components/Result';\nimport './App.css';\nimport logo from './logo.png';\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            fatValue: '',\n            carbValue: '',\n            protValue: '',\n            fiberValue: '',\n        };\n\n        // binds\n        this.handleValueChange = this.handleValueChange.bind(this);\n    }\n\n    handleValueChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n\n        this.setState({\n            [name]: value,\n            value: this.calculateValue()\n        });\n    }\n\n    calculateValue() {\n        const fat = parseFloat(this.state.fatValue);\n        const carb = parseFloat(this.state.carbValue);\n        const prot = parseFloat(this.state.protValue);\n        const fiber = parseFloat(this.state.fiberValue);\n\n        // Calculate the result according to the formula\n        let result = (fat*0.2571429) + (carb*0.1085714) + (prot*0.0914286) - (fiber*0.08);\n\n        // Make sure that the result does make logic\n        result = Math.max(result, 0);\n        result = Math.min(result, 100);\n\n        return Math.round(result);\n    }\n\n    render() {\n        return (\n            <Panel bsStyle=\"info\" className=\"app-global\">\n                <Panel.Heading className=\"main-header\">\n                    <Panel.Title componentClass=\"h1\">\n                        <Image src={logo} responsive={true} className=\"main-logo\"/>\n                    </Panel.Title>\n                </Panel.Heading>\n                <Grid className=\"main-grid\">\n                    <Row className=\"show-grid\">\n                        <Field\n                            fieldText=\"FAT\"\n                            fieldName=\"fatValue\"\n                            fieldValue={this.state.fatValue}\n                            fieldOnChange={this.handleValueChange}\n                        />\n                        <Field\n                            fieldText=\"CARBS\"\n                            fieldName=\"carbValue\"\n                            fieldValue={this.state.carbValue}\n                            fieldOnChange={this.handleValueChange}\n                        />\n                    </Row>\n                    <Row className=\"show-grid\">\n                        <Field\n                            fieldText=\"PROTEIN\"\n                            fieldName=\"protValue\"\n                            fieldValue={this.state.protValue}\n                            fieldOnChange={this.handleValueChange}\n                        />\n                        <Field\n                            fieldText=\"FIBER\"\n                            fieldName=\"fiberValue\"\n                            fieldValue={this.state.fiberValue}\n                            fieldOnChange={this.handleValueChange}\n                        />\n                    </Row>\n                </Grid>\n                        <ResultPane\n                            value={this.calculateValue()}\n                        />\n            </Panel>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.1962f440.png\";"],"sourceRoot":""}