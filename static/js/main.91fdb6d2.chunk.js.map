{"version":3,"sources":["components/Field.js","components/Fields.js","actions/savedItems.js","containers/Fields.js","actions/fields.js","components/Result.js","logic/PointsCalculations.js","containers/Result.js","containers/AddSavedItem.js","components/SavedItem.js","containers/SavedItems.js","components/App.js","serviceWorker.js","reducers/fields.js","reducers/savedItems.js","reducers/index.js","index.js","logo.png"],"names":["Field","_ref","fieldText","fieldId","fieldValue","fieldOnChange","react_default","a","createElement","Col","componentClass","ControlLabel","xs","FormControl","type","name","value","placeholder","onChange","bsSize","Fields","fields","Grid","className","Row","components_Field","fat","text","id","event","target","carb","prot","fiber","setSelected","connect","state","dispatch","chain","newValue","valueChange","ResultPane","resultValue","isNaN","parseFloat","amount","bs_style","xsOffset","Label","bsStyle","calculatePointsValue","fatValue","carbValue","protValue","fiberValue","result","Math","max","min","round","Result","onSubmission","addItem","onSubmit","e","preventDefault","trim","inputRef","node","Button","SavedItem","onSelect","onRemove","item","points","ListGroupItem","header","onClick","active","isSelected","xsPull","savedItems","itemName","undefined","length","ListGroup","map","savedItem","components_SavedItem","key","App","Panel","Heading","Title","Image","src","logo","responsive","containers_Fields","containers_Result","containers_AddSavedItem","containers_SavedItems","Boolean","window","location","hostname","match","initialState","arguments","action","new_fields","console","log","_arr","_i","field","_arr2","_i2","concat","Object","toConsumableArray","filter","t","objectSpread","combineReducers","fieldsReducer","saveItemsReducer","store","createStore","rootReducer","applyMiddleware","chainMiddleware","ReactDOM","render","es","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.91fdb6d2.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ControlLabel, FormControl, Col } from 'react-bootstrap';\n\nconst Field = ({fieldText, fieldId, fieldValue, fieldOnChange}) => (\n    <Col componentClass={ControlLabel} xs={6}>\n        <ControlLabel>\n            {fieldText} (gr)\n        </ControlLabel>\n        <FormControl\n            type=\"number\"\n            name={fieldId}\n            value={fieldValue}\n            placeholder={\"Enter value\"}\n            onChange={fieldOnChange}\n            bsSize=\"large\"\n        />\n    </Col>\n);\n\n\nField.propTypes = {\n    fieldText: PropTypes.string.isRequired,\n    fieldId: PropTypes.string.isRequired,\n    fieldOnChange: PropTypes.func.isRequired\n};\n\nexport default Field;","import React from 'react';\r\nimport Field  from '../components/Field';\r\nimport { Grid, Row } from 'react-bootstrap';\r\n\r\nconst Fields = ({fields, onChange}) => (\r\n    <Grid className=\"main-grid\">\r\n        <Row className=\"show-grid\">\r\n            <Field\r\n                fieldText={fields.fat.text}\r\n                fieldId={fields.fat.id}\r\n                fieldValue={fields.fat.value}\r\n                fieldOnChange={(event) => {onChange(fields.fat.id, event.target.value)}}\r\n            />\r\n            <Field\r\n                fieldText={fields.carb.text}\r\n                fieldId={fields.carb.id}\r\n                fieldValue={fields.carb.value}\r\n                fieldOnChange={(event) => {onChange(fields.carb.id, event.target.value)}}\r\n            />\r\n        </Row>\r\n        <Row className=\"show-grid\">\r\n            <Field\r\n                fieldText={fields.prot.text}\r\n                fieldId={fields.prot.id}\r\n                fieldValue={fields.prot.value}\r\n                fieldOnChange={(event) => {onChange(fields.prot.id, event.target.value)}}\r\n            />\r\n            <Field\r\n                fieldText={fields.fiber.text}\r\n                fieldId={fields.fiber.id}\r\n                fieldValue={fields.fiber.value}\r\n                fieldOnChange={(event) => {onChange(fields.fiber.id, event.target.value)}}\r\n            />\r\n        </Row>\r\n    </Grid>\r\n);\r\n\r\n// TODO add propTypes\r\n\r\nexport default Fields;","export const addItem = (name, fatValue, carbValue, protValue, fiberValue) => ({\r\n    type: 'ADD_SAVED_ITEM',\r\n    id: name,\r\n    fatValue,\r\n    carbValue,\r\n    protValue,\r\n    fiberValue,\r\n});\r\n\r\nexport const removeItem = (name) => ({\r\n    type: 'REMOVE_SAVE_ITEM',\r\n    name\r\n});\r\n\r\nexport const setSelected = (name) => ({\r\n    type: 'SET_SELECTED_ITEM',\r\n    name\r\n});","import { connect } from 'react-redux'\r\nimport { chain } from 'redux-chain';\r\nimport { valueChange } from '../actions/fields';\r\nimport Fields from '../components/Fields'\r\nimport {setSelected} from \"../actions/savedItems\";\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    fields: state.fields\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onChange: (id, value) => dispatch(chain(\r\n        valueChange(id, value),\r\n        setSelected(null)\r\n    ))\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Fields)","export const valueChange = (id, newValue) => ({\r\n    type: 'VALUE_CHANGE',\r\n    id: id,\r\n    value: newValue\r\n});\r\n\r\nexport const setValues = (fat, carb, prot, fiber) => ({\r\n    type: 'SET_VALUES',\r\n    fat,\r\n    carb,\r\n    prot,\r\n    fiber\r\n});","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Label, Col } from 'react-bootstrap';\n\n/**\n * Create a new pane that displays the result of the calculation.\n * @param props\n *          - value - The value to display\n */\nfunction ResultPane({resultValue}) {\n    if (isNaN(parseFloat(resultValue))) {\n        return null;\n    }\n\n    const value = resultValue;\n    const amount = value === 1 ? \"point\" : \"points\";\n    let bs_style = \"success\";\n    if (value > 5) {\n        bs_style = \"warning\";\n    }\n    if (value > 10) {\n        bs_style = \"danger\";\n    }\n\n    return (\n        <Col xsOffset={4} className=\"popper\">\n            <h1>\n                <Label bsStyle={bs_style}>\n                    {value} {amount}\n                </Label>\n            </h1>\n        </Col>\n    );\n}\n\nResultPane.propTypes = {\n    resultValue: PropTypes.number\n};\n\nexport default ResultPane;","export const calculatePointsValue = (fatValue, carbValue, protValue, fiberValue) => {\r\n    const fat = parseFloat(fatValue);\r\n    const carb = parseFloat(carbValue);\r\n    const prot = parseFloat(protValue);\r\n    const fiber = parseFloat(fiberValue);\r\n\r\n    // Calculate the result according to the formula\r\n    let result = (fat*0.2571429) + (carb*0.1085714) + (prot*0.0914286) - (fiber*0.08);\r\n\r\n    // Make sure that the result does make logic\r\n    result = Math.max(result, 0);\r\n    result = Math.min(result, 100);\r\n\r\n    return Math.round(result);\r\n};","import { connect } from 'react-redux'\r\nimport Result from '../components/Result'\r\nimport { calculatePointsValue } from \"../logic/PointsCalculations\";\r\n\r\nconst calculateValue = (fields) => {\r\n    return calculatePointsValue(\r\n        fields.fat.value,\r\n        fields.carb.value,\r\n        fields.prot.value,\r\n        fields.fiber.value\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    resultValue: calculateValue(state.fields)\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps\r\n)(Result);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Grid, Row, Col, FormControl, Button } from 'react-bootstrap';\r\nimport { addItem } from '../actions/savedItems'\r\n\r\n\r\nconst AddSavedItem = ({onSubmission, fatValue, carbValue, protValue, fiberValue}) => {\r\n    if (isNaN(fatValue) || isNaN(carbValue) || isNaN(protValue) || isNaN(fiberValue) ||\r\n        fatValue === '' || carbValue === '' || protValue === '' || fiberValue === '') {\r\n        return null;\r\n    }\r\n\r\n    let name;\r\n\r\n    return (\r\n        <form onSubmit={e => {\r\n                e.preventDefault();\r\n                if (!name.value.trim()) {\r\n                    return;\r\n                }\r\n                onSubmission(name.value, fatValue, carbValue, protValue, fiberValue);\r\n                name.value = '';\r\n            }\r\n        }>\r\n                <Grid>\r\n                    <Row className=\"show-grid space-up popper\">\r\n                        <Col xs={9}>\r\n                            <FormControl\r\n                                type=\"text\"\r\n                                name=\"new_item\"\r\n                                inputRef={node => {name = node;}}\r\n                                placeholder={\"Enter name to save\"}\r\n                            />\r\n                        </Col>\r\n                        <Col xs={2}>\r\n                            <Button type=\"submit\" bsStyle=\"success\">\r\n                                +\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Grid>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onSubmission: (name, fatValue, carbValue, protValue, fiberValue) => dispatch(addItem(name, fatValue, carbValue, protValue, fiberValue))\r\n});\r\n\r\nconst mapStateToProps = state => ({\r\n    fatValue: state.fields.fat.value,\r\n    carbValue: state.fields.carb.value,\r\n    protValue: state.fields.prot.value,\r\n    fiberValue: state.fields.fiber.value\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n) (AddSavedItem);","import React from 'react';\r\n\r\nimport { Grid, Col, ListGroupItem, Button } from 'react-bootstrap';\r\n\r\nconst SavedItem = ({onSelect, onRemove, item, points}) => (\r\n    <ListGroupItem header={item.text} onClick={() => onSelect(item)} active={item.isSelected}>\r\n        <Grid>\r\n            <Col xs={9}>\r\n            {item.points} points\r\n            </Col>\r\n            <Col xs={3} xsPull={0}>\r\n            <Button onClick={e => onRemove(item.text)} bsStyle=\"danger\">\r\n                -\r\n            </Button>\r\n            </Col>\r\n        </Grid>\r\n    </ListGroupItem>\r\n);\r\n\r\n\r\nexport default SavedItem;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Grid, ListGroup } from 'react-bootstrap';\r\n\r\nimport SavedItem from '../components/SavedItem'\r\nimport { removeItem, setSelected } from '../actions/savedItems'\r\nimport { setValues } from \"../actions/fields\";\r\nimport {chain} from \"redux-chain\";\r\n\r\nconst SavedItems = ({onSelect, onRemove, savedItems}) => {\r\n    if (savedItems === undefined || savedItems.length === 0) {\r\n        return null;\r\n    }\r\n    return (\r\n        <Grid className=\"space-up\">\r\n        <h4>\r\n            {\"Saved items:\"}\r\n        </h4>\r\n        <ListGroup>\r\n        {savedItems.map(savedItem =>\r\n            <SavedItem\r\n                key={savedItem.id}\r\n                item={savedItem}\r\n                onRemove={itemName => onRemove(itemName)}\r\n                onSelect={item => onSelect(item)}\r\n            />\r\n        )}\r\n        </ListGroup>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onRemove: itemName => dispatch(removeItem(itemName)),\r\n    onSelect: item => dispatch(chain(\r\n        setValues(item.fatValue, item.carbValue, item.protValue, item.fiberValue),\r\n        setSelected(item.id)\r\n    ))\r\n});\r\n\r\nconst mapStateToProps = state => ({\r\n    savedItems: state.savedItems\r\n});\r\n\r\nexport default connect (mapStateToProps, mapDispatchToProps) (SavedItems);","import React from 'react';\nimport { Panel, Image} from 'react-bootstrap';\nimport '../App.css';\nimport logo from '../logo.png';\n\nimport Fields from '../containers/Fields';\nimport Result from '../containers/Result'\nimport AddSavedItem from '../containers/AddSavedItem'\nimport SavedItems from '../containers/SavedItems'\n\nconst App = () => (\n    <Panel bsStyle=\"info\" className=\"app-global\">\n        <Panel.Heading className=\"main-header\">\n            <Panel.Title componentClass=\"h1\">\n                <Image src={logo} responsive={true} className=\"main-logo\"/>\n            </Panel.Title>\n        </Panel.Heading>\n        <Fields />\n        <Result />\n        <AddSavedItem />\n        <SavedItems />\n    </Panel>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\r\n    fat: {\r\n        id: 'fat',\r\n        text: \"FAT\",\r\n        value: ''\r\n    },\r\n    carb: {\r\n        id: 'carb',\r\n        text: \"CARB\",\r\n        value: ''\r\n    },\r\n    prot: {\r\n        id: 'prot',\r\n        text: 'PROT',\r\n        value: ''\r\n    },\r\n    fiber: {\r\n        id: 'fiber',\r\n        text: 'FIBER',\r\n        value: ''\r\n    }\r\n}\r\n\r\n\r\nconst fields = (state = initialState, action) => {\r\n    let new_fields = {};\r\n    switch (action.type) {\r\n        case 'VALUE_CHANGE':\r\n            console.log(\"fuckme\");\r\n            for (let field of ['fat', 'carb', 'prot', 'fiber']) {\r\n                new_fields[field] = state[field];\r\n                if (action.id === field) {\r\n                    new_fields[field].value = action.value\r\n                }\r\n            }\r\n            return new_fields;\r\n        case 'SET_VALUES':\r\n            for (let field of ['fat', 'carb', 'prot', 'fiber']) {\r\n                new_fields[field] = state[field];\r\n                new_fields[field].value = action[field]\r\n            }\r\n            return new_fields;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default fields;","import { calculatePointsValue } from \"../logic/PointsCalculations\";\r\n\r\nconst initialState = []\r\n\r\nconst savedItems = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'ADD_SAVED_ITEM':\r\n            return [\r\n                ...state,\r\n                {\r\n                    id: action.id,\r\n                    text: action.id,\r\n                    fatValue: action.fatValue,\r\n                    carbValue: action.carbValue,\r\n                    protValue: action.protValue,\r\n                    fiberValue: action.fiberValue,\r\n                    points: calculatePointsValue(action.fatValue, action.carbValue, action.protValue, action.fiberValue),\r\n                    isSelected: true\r\n                }\r\n            ];\r\n        case 'REMOVE_SAVE_ITEM':\r\n            return state.filter(t => t.id !== action.name)\r\n        case 'SET_SELECTED_ITEM':\r\n            console.log(\"curr selected is: \" + action.name)\r\n            return state.map(item => (\r\n                (item.id === action.name) ? {...item, isSelected: true} : {...item, isSelected: false}\r\n            ));\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default savedItems;","import { combineReducers } from 'redux';\r\nimport fieldsReducer  from './fields';\r\nimport saveItemsReducer from './savedItems'\r\n\r\nexport default combineReducers({\r\n    fields: fieldsReducer,\r\n    savedItems: saveItemsReducer,\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport rootReducer  from './reducers'\nimport { chainMiddleware } from 'redux-chain';\n\nconst store = createStore(\n    rootReducer,\n    applyMiddleware(chainMiddleware)\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.1962f440.png\";"],"sourceRoot":""}